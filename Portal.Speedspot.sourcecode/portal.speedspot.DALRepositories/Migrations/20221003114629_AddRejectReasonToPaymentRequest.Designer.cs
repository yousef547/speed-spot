// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using portal.speedspot.DALRepositories;

namespace portal.speedspot.DALRepositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221003114629_AddRejectReasonToPaymentRequest")]
    partial class AddRejectReasonToPaymentRequest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AfterInstallationPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("CommissionGuaranteeMonths")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryFromDays")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryGuaranteeMonths")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryToDays")
                        .HasColumnType("int");

                    b.Property<decimal>("DownPaymentPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("GuaranteeTermId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("OriginDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationOfferVersionId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalSpecifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UponDeliveryPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("GuaranteeTermId");

                    b.HasIndex("OriginDocumentId");

                    b.HasIndex("QuotationOfferVersionId")
                        .IsUnique();

                    b.HasIndex("ValidityId");

                    b.ToTable("AlternateVersions");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OfferId");

                    b.ToTable("AlternateVersionCertificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("OfferDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SupplierPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SupplierRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ProductId");

                    b.ToTable("AlternateVersionProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionProductOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductId");

                    b.ToTable("AlternateVersionProductOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BankBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BankFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidBondCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BidBondMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BidBondPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChequeCollectionCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChequeCollectionMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChequeCollectionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalLGCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalLGMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalLGPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForeignExchangeCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForeignExchangeMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForeignExchangePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form4CreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form4MinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form4Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form5CreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form5MinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Form5Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<decimal>("LCCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LCMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LCPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerformanceLGCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerformanceLGMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerformanceLGPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferCreditPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferMinFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankId")
                        .IsUnique();

                    b.ToTable("BankFees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BidBond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BidBondAttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BidBondOff_PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidBondOff_ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BidBondOn_BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BidBondOn_BankId")
                        .HasColumnType("int");

                    b.Property<string>("BidBondOn_BidBondNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BidBondOn_ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BidBondOn_Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BidBondOn_HoldAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("BidBondOn_IsCredit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BidBondOn_IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BidBondOn_NoOfPeriods")
                        .HasColumnType("int");

                    b.Property<decimal?>("BidBondOn_Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CashType")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("BidBondAttachmentId");

                    b.HasIndex("BidBondOn_BankId");

                    b.HasIndex("OpportunityId")
                        .IsUnique();

                    b.ToTable("BidBonds");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BidBondRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BidBondId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("PrintedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PrintedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BidBondId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PrintedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SentById");

                    b.HasIndex("StatusById");

                    b.ToTable("BidBondRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BookTender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptAttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("OpportunityId")
                        .IsUnique();

                    b.HasIndex("ReceiptAttachmentId");

                    b.ToTable("BookTenders");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BookTenderRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookTenderId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("PrintedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PrintedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookTenderId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PrintedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SentById");

                    b.HasIndex("StatusById");

                    b.ToTable("BookTenderRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompanyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultOfferNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultOfferNotesAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultOfferTechnicalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultOfferTechnicalNotesAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyData");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LegalInfoId");

                    b.HasIndex("LogoAttachmentId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompetitorId");

                    b.ToTable("CompetitorBanks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorBankCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitorBankId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorBankId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CompetitorBankCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("ContactId");

                    b.ToTable("CompetitorContacts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CompetitorDepartments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CompetitorEmployees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CompetitorId");

                    b.ToTable("CompetitorFiles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AfterInstallationPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryFromDays")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryToDays")
                        .HasColumnType("int");

                    b.Property<decimal>("DownPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GuaranteeTermId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVATIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UponDeliveryPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("GuaranteeTermId");

                    b.HasIndex("OriginDocumentId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("ValidityId");

                    b.ToTable("CompetitorOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OfferId");

                    b.ToTable("CompetitorOfferCertificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ProductId");

                    b.ToTable("CompetitorOfferProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferProductOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CompetitorOfferProductOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("ProductId");

                    b.ToTable("CompetitorProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneCodeId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneCodeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LegalInfoId");

                    b.HasIndex("LogoAttachmentId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("SalesAgentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("CustomerAgents");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBanks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerBankCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerBankId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerBankId");

                    b.ToTable("CustomerBankCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuotationId");

                    b.ToTable("CustomerConversations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CustomerDepartments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CustomerEmployees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerFiles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerNegotiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuotationId");

                    b.ToTable("CustomerNegotiations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerPo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerPONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("CustomerPos");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerPoAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CustomerPoId");

                    b.ToTable("CustomerPoAttachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerVendorRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("BookRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerVendorRegistrations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DeliveryPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPlaces");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColorArgb")
                        .HasColumnType("int");

                    b.Property<string>("DefaultOfferCoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultOfferCoverLetterAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("ManagingDirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesDirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagingDirectorId");

                    b.HasIndex("SalesDirectorId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentBanks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentBankCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentBankId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentBankId");

                    b.ToTable("DepartmentBankCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentDocuments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultTreasuryAccountId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTreasuryAccountId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("DepartmentSettings");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TypeId", "UserId", "ItemId")
                        .IsUnique()
                        .HasFilter("[ItemId] IS NOT NULL");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FavouriteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FavouriteTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinalLG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("CashType")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LetterOfGuaranteeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfPeriods")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptAttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptAttachmentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("BankId");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.ToTable("FinalLGs");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinalLGRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FinalLGId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("PrintedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PrintedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FinalLGId")
                        .IsUnique();

                    b.HasIndex("PrintedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SentById");

                    b.HasIndex("StatusById");

                    b.ToTable("FinalLGRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinancialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentId");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FundDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<decimal>("BankInterest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CollectionFileId")
                        .HasColumnType("int");

                    b.Property<int>("ContractFileId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("FundPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CollectionFileId");

                    b.HasIndex("ContractFileId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("FundDetails");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.GeneralRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("RequestFromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestFromId");

                    b.HasIndex("RequestedById");

                    b.ToTable("GeneralRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.GuaranteeTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GuaranteeTerms");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DirectManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectManagerId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Id" }, "IX_User")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LegalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CargoXNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("TaxCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("LegalInfos");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Logistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LegalInfoId");

                    b.HasIndex("LogoAttachmentId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Logistics");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LogisticId");

                    b.ToTable("LogisticBanks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticBankCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticBankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LogisticBankId");

                    b.ToTable("LogisticBankCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("LogisticId");

                    b.ToTable("LogisticContacts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LogisticId");

                    b.ToTable("LogisticDepartments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LogisticId");

                    b.ToTable("LogisticEmployees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LogisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("LogisticId");

                    b.ToTable("LogisticFiles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.NegotiationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AfterInstallationPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryFromDays")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryToDays")
                        .HasColumnType("int");

                    b.Property<decimal>("DownPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<decimal>("OfferValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<decimal>("UponDeliveryPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.ToTable("NegotiationResults");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("SendToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SendToId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OfferCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferCertificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OfferValidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfferValidities");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConvertedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConverted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLimitedTenderType")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocalTenderType")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTechnicalApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SalesAgentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConvertedById");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GuestId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("SalesAgentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TechnicalApprovedById");

                    b.HasIndex("TypeId");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OpportunityAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("OpportunityAttachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OpportunityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpportunityStatuses");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OpportunityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpportunityTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OriginDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OriginDocuments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OtherNegotiationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("OtherNegotiationResults");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PartnerEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneCodeId");

                    b.ToTable("PartnerEmployees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentRequestId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiveBankId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRequestId")
                        .IsUnique();

                    b.HasIndex("ReceiveBankId");

                    b.HasIndex("TreasuryId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PaymentRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentRequestDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentRequestId");

                    b.ToTable("PaymentRequestDirections");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PerformanceLG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AdvanceAttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvanceAttachmentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AdvanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdvanceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("CashType")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<int?>("IssueBankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LetterOfGuaranteeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfPeriods")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptAttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptAttachmentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiveBankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("BankId");

                    b.HasIndex("IssueBankId");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.HasIndex("ReceiveBankId");

                    b.ToTable("PerformanceLGs");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PerformanceLGRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<int>("PerformanceLGId")
                        .HasColumnType("int");

                    b.Property<string>("PrintedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PrintedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PerformanceLGId")
                        .IsUnique();

                    b.HasIndex("PrintedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SentById");

                    b.HasIndex("StatusById");

                    b.ToTable("PerformanceLGRequests");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ProductOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedData")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndData")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("QuotationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedVersionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SelectedVersionId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PurchaseOrderSupplierOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierOfferId");

                    b.ToTable("PurchaseOrderSupplierOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptanceLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcceptanceLetterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AwardingLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AwardingLetterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinancialSessionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinancialSessionStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LGType")
                        .HasColumnType("int");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectLetterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RejectReasonId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicalSessionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("RejectReasonId");

                    b.HasIndex("StatusId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationCompetitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTechnicalAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationCompetitors");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoEnvelopes")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OfferId");

                    b.ToTable("QuotationOfferCertificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("OfferDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SupplierPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SupplierRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ProductId");

                    b.ToTable("QuotationOfferProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferProductOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductId");

                    b.ToTable("QuotationOfferProductOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AfterInstallationPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AttentionTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttentionTo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommissionGuaranteeMonths")
                        .HasColumnType("int");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryFromDays")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryGuaranteeMonths")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryToDays")
                        .HasColumnType("int");

                    b.Property<decimal>("DownPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("GuaranteeTermId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalSpecifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UponDeliveryPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("GuaranteeTermId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OriginDocumentId");

                    b.HasIndex("ValidityId");

                    b.ToTable("QuotationOfferVersions");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuotationStatuses");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RejectReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RejectReasons");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RequestOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailSent")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RequestOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RequestOfferProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RequestOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestOfferId");

                    b.ToTable("RequestOfferProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.StickyNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("PageAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageController")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("StickyNotes");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("LegalInfoId");

                    b.HasIndex("LogoAttachmentId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierBanks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierBankCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierBankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierBankId");

                    b.ToTable("SupplierBankCurrencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCertificates");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierClassifications");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContacts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierConversations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierDepartments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierEmployees");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierFiles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierNegotiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierNegotiations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CIFCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryRangeFrom")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryRangeTo")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOfferAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("OfferId");

                    b.ToTable("SupplierOfferAttachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOfferProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TechnicalSpecificationProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("OfferId");

                    b.HasIndex("TechnicalSpecificationProductId");

                    b.ToTable("SupplierOfferProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FundDetailsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierPoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FundDetailsId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SupplierPoId");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPONumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierPos");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPoOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierOfferId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierPoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierOfferId");

                    b.HasIndex("SupplierPoId");

                    b.ToTable("SupplierPoOffers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("PagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId")
                        .IsUnique();

                    b.ToTable("TechnicalSpecifications");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("TechnicalSpecificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TechnicalSpecificationId");

                    b.ToTable("TechnicalSpecificationAttachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductOriginId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TechnicalSpecificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOriginId");

                    b.HasIndex("TechnicalSpecificationId");

                    b.ToTable("TechnicalSpecificationProducts");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationProductOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("TechnicalSpecificationProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TechnicalSpecificationProductId");

                    b.ToTable("TechnicalSpecificationProductOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Treasury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentBankCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentBankCurrencyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("Treasuries");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserSupervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSupervisors");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.VATValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("VATValues");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<string>("SalesAgentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.VisitReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VisitReasons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Address", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersion", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.DeliveryPlace", "DeliveryPlace")
                        .WithMany()
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.GuaranteeTerm", "GuaranteeTerm")
                        .WithMany()
                        .HasForeignKey("GuaranteeTermId");

                    b.HasOne("portal.speedspot.Models.Concretes.OriginDocument", "OriginDocument")
                        .WithMany()
                        .HasForeignKey("OriginDocumentId");

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOfferVersion", "QuotationOfferVersion")
                        .WithOne("Alternate")
                        .HasForeignKey("portal.speedspot.Models.Concretes.AlternateVersion", "QuotationOfferVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.OfferValidity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("DeliveryPlace");

                    b.Navigation("GuaranteeTerm");

                    b.Navigation("OriginDocument");

                    b.Navigation("QuotationOfferVersion");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionCertificate", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.OfferCertificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.AlternateVersion", "Offer")
                        .WithMany("Certificates")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.AlternateVersion", "Offer")
                        .WithMany("Products")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOfferProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionProductOrigin", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.AlternateVersionProduct", "Product")
                        .WithMany("SelectedOrigins")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Attachment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Audit", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Bank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BankBranch", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BankFees", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "Bank")
                        .WithOne("BankFees")
                        .HasForeignKey("portal.speedspot.Models.Concretes.BankFees", "BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BidBond", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "BidBondAttachment")
                        .WithMany()
                        .HasForeignKey("BidBondAttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "BidBondOn_Bank")
                        .WithMany()
                        .HasForeignKey("BidBondOn_BankId");

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithOne("BidBond")
                        .HasForeignKey("portal.speedspot.Models.Concretes.BidBond", "OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("BidBondAttachment");

                    b.Navigation("BidBondOn_Bank");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BidBondRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BidBond", "BidBond")
                        .WithOne("Request")
                        .HasForeignKey("portal.speedspot.Models.Concretes.BidBondRequest", "BidBondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "PrintedBy")
                        .WithMany()
                        .HasForeignKey("PrintedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "StatusBy")
                        .WithMany()
                        .HasForeignKey("StatusById");

                    b.Navigation("BidBond");

                    b.Navigation("Department");

                    b.Navigation("PrintedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("SentBy");

                    b.Navigation("StatusBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BookTender", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithOne("BookTender")
                        .HasForeignKey("portal.speedspot.Models.Concretes.BookTender", "OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "ReceiptAttachment")
                        .WithMany()
                        .HasForeignKey("ReceiptAttachmentId");

                    b.Navigation("AssignedTo");

                    b.Navigation("Opportunity");

                    b.Navigation("ReceiptAttachment");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BookTenderRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BookTender", "BookTender")
                        .WithOne("Request")
                        .HasForeignKey("portal.speedspot.Models.Concretes.BookTenderRequest", "BookTenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "PrintedBy")
                        .WithMany()
                        .HasForeignKey("PrintedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "StatusBy")
                        .WithMany()
                        .HasForeignKey("StatusById");

                    b.Navigation("BookTender");

                    b.Navigation("Department");

                    b.Navigation("PrintedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("SentBy");

                    b.Navigation("StatusBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Certificate", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.City", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Competitor", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.LegalInfo", "LegalInfo")
                        .WithMany()
                        .HasForeignKey("LegalInfoId");

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "LogoAttachment")
                        .WithMany()
                        .HasForeignKey("LogoAttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ActivityType");

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("LegalInfo");

                    b.Navigation("LogoAttachment");

                    b.Navigation("OrganizationType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorBank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Banks")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Competitor");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorBankCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.CompetitorBank", "CompetitorBank")
                        .WithMany("Currencies")
                        .HasForeignKey("CompetitorBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitorBank");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorContact", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Contacts")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorDepartment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Departments")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorEmployee", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Employees")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PartnerEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorFile", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Files")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Competitor");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.DeliveryPlace", "DeliveryPlace")
                        .WithMany()
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.GuaranteeTerm", "GuaranteeTerm")
                        .WithMany()
                        .HasForeignKey("GuaranteeTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.OriginDocument", "OriginDocument")
                        .WithMany()
                        .HasForeignKey("OriginDocumentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("CompetitorOffers")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.OfferValidity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("DeliveryPlace");

                    b.Navigation("GuaranteeTerm");

                    b.Navigation("OriginDocument");

                    b.Navigation("Quotation");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferCertificate", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.OfferCertificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.CompetitorOffer", "Offer")
                        .WithMany("Certificates")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.CompetitorOffer", "Offer")
                        .WithMany("Products")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferProductOrigin", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.CompetitorOfferProduct", "Product")
                        .WithMany("Origins")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany("Products")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Contact", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "PhoneCode")
                        .WithMany()
                        .HasForeignKey("PhoneCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.ContactType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneCode");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Customer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.LegalInfo", "LegalInfo")
                        .WithMany()
                        .HasForeignKey("LegalInfoId");

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "LogoAttachment")
                        .WithMany()
                        .HasForeignKey("LogoAttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ActivityType");

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("LegalInfo");

                    b.Navigation("LogoAttachment");

                    b.Navigation("OrganizationType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerAgent", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("SalesAgents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SalesAgent")
                        .WithMany()
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerBank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Banks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerBankCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.CustomerBank", "CustomerBank")
                        .WithMany("Currencies")
                        .HasForeignKey("CustomerBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("CustomerBank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerContact", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerConversation", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("CustomerConversations")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerDepartment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Departments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerEmployee", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Employees")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PartnerEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerFile", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Files")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerNegotiation", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("CustomerNegotiations")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerPo", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PurchaseOrder", "PurchaseOrder")
                        .WithOne("CustomerPo")
                        .HasForeignKey("portal.speedspot.Models.Concretes.CustomerPo", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerPoAttachment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.CustomerPo", "CustomerPo")
                        .WithMany("Attachments")
                        .HasForeignKey("CustomerPoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CustomerPo");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerVendorRegistration", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("VendorRegistrations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Department", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "ManagingDirector")
                        .WithMany("ManagingDepartments")
                        .HasForeignKey("ManagingDirectorId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SalesDirector")
                        .WithMany("SalesDepartments")
                        .HasForeignKey("SalesDirectorId");

                    b.Navigation("ManagingDirector");

                    b.Navigation("SalesDirector");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentBank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany("DepartmentBanks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentBankCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.DepartmentBank", "DepartmentBank")
                        .WithMany("Currencies")
                        .HasForeignKey("DepartmentBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("DepartmentBank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentDocument", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany("DepartmentDocuments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentSettings", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.FinancialAccount", "DefaultTreasuryAccount")
                        .WithMany()
                        .HasForeignKey("DefaultTreasuryAccountId");

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithOne("Settings")
                        .HasForeignKey("portal.speedspot.Models.Concretes.DepartmentSettings", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultTreasuryAccount");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Favourite", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.FavouriteType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinalLG", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithOne("FinalLG")
                        .HasForeignKey("portal.speedspot.Models.Concretes.FinalLG", "QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Bank");

                    b.Navigation("BankBranch");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinalLGRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.FinalLG", "FinalLG")
                        .WithOne("Request")
                        .HasForeignKey("portal.speedspot.Models.Concretes.FinalLGRequest", "FinalLGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "PrintedBy")
                        .WithMany()
                        .HasForeignKey("PrintedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "StatusBy")
                        .WithMany()
                        .HasForeignKey("StatusById");

                    b.Navigation("Department");

                    b.Navigation("FinalLG");

                    b.Navigation("PrintedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("SentBy");

                    b.Navigation("StatusBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinancialAccount", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.FinancialAccount", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Department");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FundDetails", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "CollectionFile")
                        .WithMany()
                        .HasForeignKey("CollectionFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "ContractFile")
                        .WithMany()
                        .HasForeignKey("ContractFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PurchaseOrder", "PurchaseOrder")
                        .WithOne("FundDetails")
                        .HasForeignKey("portal.speedspot.Models.Concretes.FundDetails", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("CollectionFile");

                    b.Navigation("ContractFile");

                    b.Navigation("Currency");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.GeneralRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestFrom")
                        .WithMany()
                        .HasForeignKey("RequestFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedBy");

                    b.Navigation("RequestFrom");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationUser", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "DirectManager")
                        .WithMany("Employees")
                        .HasForeignKey("DirectManagerId");

                    b.HasOne("portal.speedspot.Models.Concretes.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("DirectManager");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Journal", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.JournalEntry", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.FinancialAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Journal", "Journal")
                        .WithMany("Entries")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LegalInfo", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Logistic", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.LegalInfo", "LegalInfo")
                        .WithMany()
                        .HasForeignKey("LegalInfoId");

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "LogoAttachment")
                        .WithMany()
                        .HasForeignKey("LogoAttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ActivityType");

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("LegalInfo");

                    b.Navigation("LogoAttachment");

                    b.Navigation("OrganizationType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticBank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Logistic")
                        .WithMany("Banks")
                        .HasForeignKey("LogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Logistic");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticBankCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.LogisticBank", "LogisticBank")
                        .WithMany("Currencies")
                        .HasForeignKey("LogisticBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("LogisticBank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticContact", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Logistic")
                        .WithMany("Contacts")
                        .HasForeignKey("LogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Logistic");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticDepartment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Logistic")
                        .WithMany("Departments")
                        .HasForeignKey("LogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Logistic");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticEmployee", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PartnerEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Logistic")
                        .WithMany("Employees")
                        .HasForeignKey("LogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Logistic");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticFile", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Logistic", "Logistic")
                        .WithMany("Files")
                        .HasForeignKey("LogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Logistic");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.NegotiationResult", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithOne("NegotiationResults")
                        .HasForeignKey("portal.speedspot.Models.Concretes.NegotiationResult", "QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Notification", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.NotificationUser", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SendTo")
                        .WithMany()
                        .HasForeignKey("SendToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("SendTo");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Opportunity", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "ConvertedBy")
                        .WithMany()
                        .HasForeignKey("ConvertedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany("Opportunities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SalesAgent")
                        .WithMany()
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.OpportunityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "TechnicalApprovedBy")
                        .WithMany()
                        .HasForeignKey("TechnicalApprovedById");

                    b.HasOne("portal.speedspot.Models.Concretes.OpportunityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConvertedBy");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("Guest");

                    b.Navigation("ProjectManager");

                    b.Navigation("SalesAgent");

                    b.Navigation("Status");

                    b.Navigation("TechnicalApprovedBy");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OpportunityAttachment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithMany("OtherAttachments")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.OtherNegotiationResult", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("OtherNegotiationResults")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PartnerEmployee", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "PhoneCode")
                        .WithMany()
                        .HasForeignKey("PhoneCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneCode");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentDetails", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PaymentRequest", "PaymentRequest")
                        .WithOne("PaymentDetails")
                        .HasForeignKey("portal.speedspot.Models.Concretes.PaymentDetails", "PaymentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "ReceiveBank")
                        .WithMany()
                        .HasForeignKey("ReceiveBankId");

                    b.HasOne("portal.speedspot.Models.Concretes.Treasury", "Treasury")
                        .WithMany("Payments")
                        .HasForeignKey("TreasuryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentRequest");

                    b.Navigation("ReceiveBank");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Currency");

                    b.Navigation("Department");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentRequestDirection", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.FinancialAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PaymentRequest", "PaymentRequest")
                        .WithMany("Directions")
                        .HasForeignKey("PaymentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PaymentRequest");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PerformanceLG", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "IssueBank")
                        .WithMany()
                        .HasForeignKey("IssueBankId");

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithOne("PerformanceLG")
                        .HasForeignKey("portal.speedspot.Models.Concretes.PerformanceLG", "QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Bank", "ReceiveBank")
                        .WithMany()
                        .HasForeignKey("ReceiveBankId");

                    b.Navigation("AssignedTo");

                    b.Navigation("Bank");

                    b.Navigation("BankBranch");

                    b.Navigation("IssueBank");

                    b.Navigation("Quotation");

                    b.Navigation("ReceiveBank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PerformanceLGRequest", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PerformanceLG", "PerformanceLG")
                        .WithOne("Request")
                        .HasForeignKey("portal.speedspot.Models.Concretes.PerformanceLGRequest", "PerformanceLGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "PrintedBy")
                        .WithMany()
                        .HasForeignKey("PrintedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "StatusBy")
                        .WithMany()
                        .HasForeignKey("StatusById");

                    b.Navigation("Department");

                    b.Navigation("PerformanceLG");

                    b.Navigation("PrintedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("SentBy");

                    b.Navigation("StatusBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Product", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ProductCategory", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.ProductCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Department");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Project", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("Opportunity");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PurchaseOrder", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById");

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOfferVersion", "SelectedVersion")
                        .WithMany()
                        .HasForeignKey("SelectedVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Quotation");

                    b.Navigation("SelectedVersion");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PurchaseOrderSupplierOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PurchaseOrder", "PurchaseOrder")
                        .WithMany("AcceptedOffers")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOffer", "SupplierOffer")
                        .WithMany()
                        .HasForeignKey("SupplierOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SupplierOffer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Quotation", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.RejectReason", "RejectReason")
                        .WithMany()
                        .HasForeignKey("RejectReasonId");

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("CreatedBy");

                    b.Navigation("Opportunity");

                    b.Navigation("RejectReason");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationCompetitor", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("Competitors")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("Currencies")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("Offers")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferCertificate", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.OfferCertificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOfferVersion", "Offer")
                        .WithMany("Certificates")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOfferVersion", "Offer")
                        .WithMany("Products")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOfferProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferProductOrigin", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOfferProduct", "Product")
                        .WithMany("SelectedOrigins")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferVersion", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.DeliveryPlace", "DeliveryPlace")
                        .WithMany()
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.GuaranteeTerm", "GuaranteeTerm")
                        .WithMany()
                        .HasForeignKey("GuaranteeTermId");

                    b.HasOne("portal.speedspot.Models.Concretes.QuotationOffer", "Offer")
                        .WithMany("Versions")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.OriginDocument", "OriginDocument")
                        .WithMany()
                        .HasForeignKey("OriginDocumentId");

                    b.HasOne("portal.speedspot.Models.Concretes.OfferValidity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("DeliveryPlace");

                    b.Navigation("GuaranteeTerm");

                    b.Navigation("Offer");

                    b.Navigation("OriginDocument");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RequestOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithMany("RequestOffers")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RequestOfferProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.RequestOffer", "RequestOffer")
                        .WithMany("Products")
                        .HasForeignKey("RequestOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RequestOffer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.StickyNote", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Supplier", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("portal.speedspot.Models.Concretes.Competitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId");

                    b.HasOne("portal.speedspot.Models.Concretes.LegalInfo", "LegalInfo")
                        .WithMany()
                        .HasForeignKey("LegalInfoId");

                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "LogoAttachment")
                        .WithMany()
                        .HasForeignKey("LogoAttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("ActivityType");

                    b.Navigation("Address");

                    b.Navigation("Competitor");

                    b.Navigation("LegalInfo");

                    b.Navigation("LogoAttachment");

                    b.Navigation("OrganizationType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierBank", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.BankBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Banks")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierBankCurrency", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierBank", "SupplierBank")
                        .WithMany("Currencies")
                        .HasForeignKey("SupplierBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("SupplierBank");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierCertificate", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Certificates")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierClassification", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Classifications")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierContact", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierConversation", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("SupplierConversations")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Quotation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierDepartment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Departments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierEmployee", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PartnerEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Employees")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierFile", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Files")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierNegotiation", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Quotation", "Quotation")
                        .WithMany("SupplierNegotiations")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("Quotation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.DeliveryType", "DeliveryType")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithMany("SupplierOffers")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("DeliveryType");

                    b.Navigation("Opportunity");

                    b.Navigation("PaymentType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOfferAttachment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOffer", "Offer")
                        .WithMany("Attachments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOfferProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOffer", "Offer")
                        .WithMany("Products")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", "TechnicalSpecificationProduct")
                        .WithMany()
                        .HasForeignKey("TechnicalSpecificationProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Offer");

                    b.Navigation("TechnicalSpecificationProduct");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPayment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.FundDetails", "FundDetails")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("FundDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierPo", "SupplierPo")
                        .WithMany()
                        .HasForeignKey("SupplierPoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FundDetails");

                    b.Navigation("PaymentType");

                    b.Navigation("SupplierPo");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPo", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.PurchaseOrder", "PurchaseOrder")
                        .WithMany("SupplierPos")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPoOffer", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.SupplierOffer", "SupplierOffer")
                        .WithMany()
                        .HasForeignKey("SupplierOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.SupplierPo", "SupplierPo")
                        .WithMany("Offers")
                        .HasForeignKey("SupplierPoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierOffer");

                    b.Navigation("SupplierPo");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Product", "Product")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Tasks", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecification", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Opportunity", "Opportunity")
                        .WithOne("TechnicalSpecification")
                        .HasForeignKey("portal.speedspot.Models.Concretes.TechnicalSpecification", "OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationAttachment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecification", "TechnicalSpecification")
                        .WithMany("Attachments")
                        .HasForeignKey("TechnicalSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("TechnicalSpecification");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("portal.speedspot.Models.Concretes.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.ProductOrigin", "ProductOrigin")
                        .WithMany()
                        .HasForeignKey("ProductOriginId");

                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecification", "TechnicalSpecification")
                        .WithMany("Products")
                        .HasForeignKey("TechnicalSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Product");

                    b.Navigation("ProductOrigin");

                    b.Navigation("TechnicalSpecification");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationProductOrigin", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", "TechnicalSpecificationProduct")
                        .WithMany("RequestedOrigins")
                        .HasForeignKey("TechnicalSpecificationProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TechnicalSpecificationProduct");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Treasury", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("portal.speedspot.Models.Concretes.DepartmentBankCurrency", "DepartmentBankCurrency")
                        .WithMany()
                        .HasForeignKey("DepartmentBankCurrencyId");

                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.FinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Department");

                    b.Navigation("DepartmentBankCurrency");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserActivity", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserDepartment", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.UserSupervisor", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "User")
                        .WithMany("Supervisors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Visit", b =>
                {
                    b.HasOne("portal.speedspot.Models.Concretes.Customer", "Customer")
                        .WithMany("Visits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.VisitReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portal.speedspot.Models.Concretes.Identity.ApplicationUser", "SalesAgent")
                        .WithMany()
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Reason");

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersion", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.AlternateVersionProduct", b =>
                {
                    b.Navigation("SelectedOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Bank", b =>
                {
                    b.Navigation("BankFees");

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BidBond", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.BookTender", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Competitor", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Childs");

                    b.Navigation("Contacts");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Files");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorBank", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOffer", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CompetitorOfferProduct", b =>
                {
                    b.Navigation("Origins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Customer", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Childs");

                    b.Navigation("Contacts");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Files");

                    b.Navigation("SalesAgents");

                    b.Navigation("VendorRegistrations");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerBank", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.CustomerPo", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Department", b =>
                {
                    b.Navigation("DepartmentBanks");

                    b.Navigation("DepartmentDocuments");

                    b.Navigation("Opportunities");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.DepartmentBank", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinalLG", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FinancialAccount", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.FundDetails", b =>
                {
                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ManagingDepartments");

                    b.Navigation("SalesDepartments");

                    b.Navigation("Supervisors");

                    b.Navigation("UserDepartments");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Journal", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Logistic", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Childs");

                    b.Navigation("Contacts");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.LogisticBank", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Opportunity", b =>
                {
                    b.Navigation("BidBond");

                    b.Navigation("BookTender");

                    b.Navigation("OtherAttachments");

                    b.Navigation("RequestOffers");

                    b.Navigation("SupplierOffers");

                    b.Navigation("TechnicalSpecification");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PaymentRequest", b =>
                {
                    b.Navigation("Directions");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PerformanceLG", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Product", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.ProductCategory", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.PurchaseOrder", b =>
                {
                    b.Navigation("AcceptedOffers");

                    b.Navigation("CustomerPo");

                    b.Navigation("FundDetails");

                    b.Navigation("SupplierPos");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Quotation", b =>
                {
                    b.Navigation("CompetitorOffers");

                    b.Navigation("Competitors");

                    b.Navigation("Currencies");

                    b.Navigation("CustomerConversations");

                    b.Navigation("CustomerNegotiations");

                    b.Navigation("FinalLG");

                    b.Navigation("NegotiationResults");

                    b.Navigation("Offers");

                    b.Navigation("OtherNegotiationResults");

                    b.Navigation("PerformanceLG");

                    b.Navigation("SupplierConversations");

                    b.Navigation("SupplierNegotiations");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOffer", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferProduct", b =>
                {
                    b.Navigation("SelectedOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.QuotationOfferVersion", b =>
                {
                    b.Navigation("Alternate");

                    b.Navigation("Certificates");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.RequestOffer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Supplier", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Certificates");

                    b.Navigation("Childs");

                    b.Navigation("Classifications");

                    b.Navigation("Contacts");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Files");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierBank", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierOffer", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.SupplierPo", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecification", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.TechnicalSpecificationProduct", b =>
                {
                    b.Navigation("RequestedOrigins");
                });

            modelBuilder.Entity("portal.speedspot.Models.Concretes.Treasury", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
